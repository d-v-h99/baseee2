package com.github.zieiony.base.navigation

import android.content.Intent
import android.os.Parcel
import java.io.ObjectInputStream
import java.io.ObjectOutputStream
import java.io.Serializable

//m√¥ h√¨nh s·ª± ki·ªán ƒëi·ªÅu h∆∞·ªõng (event) g√≥i g·ªçn m·ªçi ‚Äúh√†nh ƒë·ªông ƒëi·ªÅu h∆∞·ªõng‚Äù th√†nh c√°c ki·ªÉu d·ªØ li·ªáu an to√†n ƒë·ªÉ ƒë∆∞a qua h√†ng ƒë·ª£i, state, hay l∆∞u/kh√¥i ph·ª•c
// sealed class: gi·ªõi h·∫°n c√°c ki·ªÉu con trong c√πng file ‚Üí when(event) s·∫Ω exhaustive (kh√¥ng c·∫ßn else)..
internal sealed class NavigationEvent : Serializable {
    //ƒêi·ªÅu h∆∞·ªõng t·ªõi m·ªôt Fragment theo t√™n class + arguments (map c√°c gi√° tr·ªã Serializable?).
    internal class FragmentNavigationEvent(
        val className: String,
        val arguments: HashMap<String, Serializable?>? = null
    ) : NavigationEvent()
    //ƒêi·ªÅu h∆∞·ªõng b·∫±ng Intent.
    //Intent kh√¥ng Serializable, n√™n t√°c gi·∫£ t·ª± ƒë·ªãnh nghƒ©a 2 h√†m ƒë·∫∑c bi·ªát c·ªßa Java Serialization:
    internal class IntentNavigationEvent(var intent: Intent) : NavigationEvent() {

        @Throws(Exception::class)
        //ghi m·∫£ng byte v√†o ObjectOutputStream.
        private fun writeObject(oos: ObjectOutputStream) {
            val parcel = Parcel.obtain()
            intent.writeToParcel(parcel, 0)
            oos.write(parcel.marshall())
            parcel.recycle()
        }

        @Throws(Exception::class)
        private fun readObject(ois: ObjectInputStream) {
            //ƒê·ªçc l·∫°i bytes t·ª´ ObjectInputStream.readBytes(), Parcel.unmarshall(...), r·ªìi Intent.CREATOR.createFromParcel(parcel) ‚Üí kh√¥i ph·ª•c intent.
            val bytes = ois.readBytes()
            val parcel = Parcel.obtain()
            parcel.unmarshall(bytes, 0, bytes.size)
            intent = Intent.CREATOR.createFromParcel(parcel)//ƒê√¢y l√† ‚Äúc·∫ßu n·ªëi‚Äù Serializable ‚áÑ Parcelable (Intent v·ªën Parcelable).
            parcel.recycle()
        }

    }
    //singleton (instance duy nh·∫•t) ngay khi ƒë∆∞·ª£c load.
    internal object BackNavigationEvent : NavigationEvent() //Singleton quay l·∫°i (back). Kh√¥ng c·∫ßn d·ªØ li·ªáu k√®m theo.

    internal class ResultNavigationEvent(val key: String, val result: Serializable?) ://Tr·∫£ k·∫øt qu·∫£ ki·ªÉu key‚Äìvalue (gi√° tr·ªã Serializable?).
        NavigationEvent()

    internal class ResultNavigationEvent2(val result: Result) : NavigationEvent()//Tr·∫£ k·∫øt qu·∫£ g√≥i trong Result(target, key, value) (ƒë√£ c√≥ target ƒë·ªÉ ƒë·ªãnh tuy·∫øn t·ªõi navigator ƒë√≠ch).
}
/* | Modifier    | Truy c·∫≠p ƒë∆∞·ª£c t·ª´                                      | Android v√≠ d·ª•                                 |
| ----------- | ----------------------------------------------------- | --------------------------------------------- |
| `public`    | M·ªçi n∆°i                                               | Class/method b·∫°n mu·ªën d√πng ·ªü module kh√°c      |
| `internal`  | Trong c√πng module                                     | Class helper ch·ªâ d√πng n·ªôi b·ªô app ho·∫∑c library |
| `protected` | Class con v√† c√πng package (Java) / class con (Kotlin) | Method d√πng trong class cha v√† class con      |
| `private`   | Trong c√πng file ho·∫∑c class                            | Bi·∫øn helper ch·ªâ d√πng n·ªôi b·ªô file ho·∫∑c class   |

sealed class l√† g√¨?
L√† class ƒë·∫∑c bi·ªát trong Kotlin cho ph√©p b·∫°n gi·ªõi h·∫°n c√°c l·ªõp con (subclass) c·ªßa n√≥.

C√°c l·ªõp con ph·∫£i ƒë∆∞·ª£c khai b√°o:

Trong c√πng file v·ªõi l·ªõp sealed ƒë√≥ (nh∆∞ng c√≥ th·ªÉ kh√°c nhau v·ªÅ package).

√ù nghƒ©a: b·∫°n ki·ªÉm so√°t ƒë∆∞·ª£c h·∫øt c√°c ki·ªÉu con c√≥ th·ªÉ xu·∫•t hi·ªán.
. T·∫°i sao c·∫ßn sealed class?
Khi b·∫°n x·ª≠ l√Ω logic when(...) v·ªõi m·ªôt sealed class, Kotlin s·∫Ω ki·ªÉm tra t·∫°i compile-time:

N·∫øu b·∫°n li·ªát k√™ h·∫øt t·∫•t c·∫£ c√°c subclass ‚Üí kh√¥ng c·∫ßn else.

N·∫øu thi·∫øu case n√†o ‚Üí b√°o l·ªói compile.

üí° Gi√∫p code an to√†n ki·ªÉu (type safety) v√† r√µ r√†ng.

| Lo·∫°i class       | C√≥ th·ªÉ k·∫ø th·ª´a t·ª´ ngo√†i file kh√¥ng? | D√πng ƒë·ªÉ‚Ä¶                                                |
| ---------------- | ----------------------------------- | ------------------------------------------------------- |
| `open class`     | C√≥                                  | Cho ph√©p k·∫ø th·ª´a t·ª± do                                  |
| `final class`    | Kh√¥ng                               | NgƒÉn k·∫ø th·ª´a                                            |
| `abstract class` | C√≥                                  | L√†m base cho c√°c class kh√°c, kh√¥ng t·∫°o object tr·ª±c ti·∫øp |
| `sealed class`   | Kh√¥ng (ch·ªâ trong c√πng file)         | Gi·ªõi h·∫°n ki·ªÉu con, gi√∫p `when` exhaustive               |

*/